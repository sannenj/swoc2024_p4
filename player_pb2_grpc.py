# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import player_pb2 as player__pb2


class PlayerHostStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/PlayerInterface.PlayerHost/Register',
                request_serializer=player__pb2.RegisterRequest.SerializeToString,
                response_deserializer=player__pb2.GameSettings.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/PlayerInterface.PlayerHost/Subscribe',
                request_serializer=player__pb2.SubsribeRequest.SerializeToString,
                response_deserializer=player__pb2.GameUpdateMessage.FromString,
                )
        self.GetGameState = channel.unary_unary(
                '/PlayerInterface.PlayerHost/GetGameState',
                request_serializer=player__pb2.EmptyRequest.SerializeToString,
                response_deserializer=player__pb2.GameStateMessage.FromString,
                )
        self.MakeMove = channel.unary_unary(
                '/PlayerInterface.PlayerHost/MakeMove',
                request_serializer=player__pb2.Move.SerializeToString,
                response_deserializer=player__pb2.EmptyRequest.FromString,
                )
        self.SplitSnake = channel.unary_unary(
                '/PlayerInterface.PlayerHost/SplitSnake',
                request_serializer=player__pb2.SplitRequest.SerializeToString,
                response_deserializer=player__pb2.EmptyRequest.FromString,
                )
        self.SubscribeToServerEvents = channel.unary_stream(
                '/PlayerInterface.PlayerHost/SubscribeToServerEvents',
                request_serializer=player__pb2.EmptyRequest.SerializeToString,
                response_deserializer=player__pb2.ServerUpdateMessage.FromString,
                )


class PlayerHostServicer(object):
    """The greeting service definition.
    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MakeMove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SplitSnake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToServerEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PlayerHostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=player__pb2.RegisterRequest.FromString,
                    response_serializer=player__pb2.GameSettings.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=player__pb2.SubsribeRequest.FromString,
                    response_serializer=player__pb2.GameUpdateMessage.SerializeToString,
            ),
            'GetGameState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameState,
                    request_deserializer=player__pb2.EmptyRequest.FromString,
                    response_serializer=player__pb2.GameStateMessage.SerializeToString,
            ),
            'MakeMove': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeMove,
                    request_deserializer=player__pb2.Move.FromString,
                    response_serializer=player__pb2.EmptyRequest.SerializeToString,
            ),
            'SplitSnake': grpc.unary_unary_rpc_method_handler(
                    servicer.SplitSnake,
                    request_deserializer=player__pb2.SplitRequest.FromString,
                    response_serializer=player__pb2.EmptyRequest.SerializeToString,
            ),
            'SubscribeToServerEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToServerEvents,
                    request_deserializer=player__pb2.EmptyRequest.FromString,
                    response_serializer=player__pb2.ServerUpdateMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PlayerInterface.PlayerHost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PlayerHost(object):
    """The greeting service definition.
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlayerInterface.PlayerHost/Register',
            player__pb2.RegisterRequest.SerializeToString,
            player__pb2.GameSettings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PlayerInterface.PlayerHost/Subscribe',
            player__pb2.SubsribeRequest.SerializeToString,
            player__pb2.GameUpdateMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGameState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlayerInterface.PlayerHost/GetGameState',
            player__pb2.EmptyRequest.SerializeToString,
            player__pb2.GameStateMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MakeMove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlayerInterface.PlayerHost/MakeMove',
            player__pb2.Move.SerializeToString,
            player__pb2.EmptyRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SplitSnake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/PlayerInterface.PlayerHost/SplitSnake',
            player__pb2.SplitRequest.SerializeToString,
            player__pb2.EmptyRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToServerEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/PlayerInterface.PlayerHost/SubscribeToServerEvents',
            player__pb2.EmptyRequest.SerializeToString,
            player__pb2.ServerUpdateMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
